/*
 * K-Nearest Neighbors Algorithm.
 * Ran Schreiber.
 * Version 1.0.3 04/2015
 */

function kNN(c){this.Graph=new kNN.GraphOfNodes(c)}kNN.prototype.launch=function(c,a){this.Graph.setK(c);this.Graph.setUnknownNode(a);this.Graph.measureDistances();this.Graph.sortDistances();return this.Graph.guessType()};kNN.Node=function(c){this.prototype=c};
kNN.GraphOfNodes=function(c){this.setUnknownNode=function(a){if(!(a instanceof kNN.Node))throw new TypeError("The unknown node is not an instance of kNN.Node");this.unknownNode=a};this.setK=function(a){if(!(0<a&&Math.floor(a)===+a))throw Error("K must be a natural number");this.k=a};this.Nodes=c;this.calculateRanges=function(){var a={},b={},d={},e;for(e in this.Nodes){currentNode=this.Nodes[e];if(!(currentNode instanceof kNN.Node))throw new TypeError("Some node in the dataset is not an instance of kNN.Node");
for(i in currentNode.prototype)if("type"==i){if("string"!=typeof currentNode.prototype[i])throw new TypeError("Some type in the dataset is not a string");}else{if("number"!=typeof currentNode.prototype[i])throw new TypeError("Some property in the dataset is not a number");void 0==a[i]?a[i]=currentNode.prototype[i]:void 0==b[i]?b[i]=currentNode.prototype[i]:(currentNode.prototype[i]<a[i]&&(a[i]=currentNode.prototype[i]),currentNode.prototype[i]>b[i]&&(b[i]=currentNode.prototype[i]));d[i]=b[i]-a[i]}}for(i in this.unknownNode.prototype)if("type"!=
i){if("number"!=typeof this.unknownNode.prototype[i])throw new TypeError("Some property of the unknown node is not a number");void 0==a[i]?a[i]=this.unknownNode.prototype[i]:void 0==b[i]?b[i]=this.unknownNode.prototype[i]:(this.unknownNode.prototype[i]<a[i]&&(a[i]=this.unknownNode.prototype[i]),this.unknownNode.prototype[i]>b[i]&&(b[i]=this.unknownNode.prototype[i]));d[i]=b[i]-a[i]}return d};this.measureDistances=function(){var a=this.calculateRanges(),b;for(b in this.Nodes){var d=this.Nodes[b],e=
0,c;for(c in d.prototype)"type"!=c&&"distance"!=c&&(e+=Math.pow((d.prototype[c]-this.unknownNode.prototype[c])/a[c],2));d.prototype.distance=Math.sqrt(e)}};this.sortDistances=function(){this.Nodes.sort(function(a,b){return a.prototype.distance-b.prototype.distance})};this.guessType=function(){var a={},b;for(b in this.Nodes.slice(0,this.k)){var d=this.Nodes[b];a[d.prototype.type]=0<=a[d.prototype.type]?a[d.prototype.type]+1:1}b=!1;var d=0,c;for(c in a)a[c]>d&&(b=c,d=a[c]);return{type:b,percentage:100*d/this.k}}};

module.exports = kNN;